import { Lister } from './lister';
import { HttpHeaders } from '@angular/common/http';
import { AuthService } from './../signin/auth.service';
import { Injectable } from '@angular/core';
import { Response, RequestOptions, Http, Headers, ResponseContentType } from '@angular/http';
import { Observable } from 'rxjs/Observable';


@Injectable()
export class DataStorageService {
  constructor(private http: Http,
    private authService: AuthService,
    private lister: Lister,
  ) {
  }


  /*
    ROLLENAVN:
        lister.harRolle('brukere') 
        lister.harRolle('verktøy')
        lister.harRolle('brakkerigg')
        lister.harRolle('verneutstyr')
        lister.harRolle('arbeidstøy')
        lister.harRolle('kandidat')
        lister.harRolle('stoffkartotek')
        lister.harRolle('roller')

          public reqstring = 'https://rig.rj-web.no/public/';

  */

  slett(id, objektnavn) {
    console.log('DSS: slett()');
    const reqString = this.lister.reqstring + objektnavn + '/' + id;
    return this.http.delete(reqString,
      this.authService.getOpts()).map(
        (response: Response) => {
          const data = response.json();
          return data.data;
        }
      ).catch(
        (error: Response) => {

          console.log(error);
          //          {"error":"This action is unauthorized.","code":401}
          alert(JSON.stringify(error.json()));
          return Observable.throw(error.json());
        }
      );

  }

  ny(obj: any[], objektnavn) {
    //  console.log('DSS: ny()');

    if (obj['id']) {
      delete obj['id'];
    }
    return this.http.post(this.lister.reqstring + objektnavn, obj, this.authService.getOpts()).map(
      (response: Response) => {
        const data = response.json();
        return data.data;
      }
    )
      .catch(
        (error: Response) => {
          alert(JSON.stringify(error.json()));
          return Observable.throw(error.json());
        }
      );
  }

  set(obj: any[], objektnavn) {
    //  console.log('DSS: set()');
    return this.http.put(this.lister.reqstring + objektnavn + '/' + obj['id'], obj, this.authService.getOpts()).map(
      (response: Response) => {
        const data = response.json();
        return data.data;
      }
    )
      .catch(
        (error: Response) => {
          alert(JSON.stringify(error.json()));
          return Observable.throw(error.json());
        }
      );
  }

  get(id, objektnavn) {
    console.log('DSS: get()');
    return this.http.get(this.lister.reqstring + objektnavn + '/' + id, this.authService.getOpts())
      .map(response => {
        return response.json().data;
      }).catch(
        (error: Response) => {
          //          return Observable.throw('');
          return Observable.throw(error.json());
        }
      );
  }

  getIndex(objektnavn) {
    console.log('DSS: getIndex()');
    return this.http.get(this.lister.reqstring + objektnavn, this.authService.getOpts())
      //      return $this->errorResponse('Unauthenticated.', 401);
      // return this.http.get(this.lister.reqstring + objektnavn, this.authService.getOpts())

      .map(response => {
        return response.json().data;
      }).catch(
        (error: Response) => {
          //        console.log(error);

          // {"error":"The specified URL cannot be found","code":404}
          //          alert(JSON.stringify(error.json().code));

    //      alert(JSON.stringify(error.json().code));
      //    alert(JSON.stringify(error.json()));
      this.feilmelding(error.json(), objektnavn);

          return Observable.throw(error.json());
        }
      );
  }



  feilmelding(code, objektnavn) {

    switch (code) {
      case 404: {
        // {"error":"The specified URL cannot be found","code":404}
 
        alert('Systemet ');
        break;
      }
      case 'opp': {
        //      this.resetDisplay(new Date(this.aar, this.maaned + 1, 1));
        break;
      }
      case 'opp_ett_aar': {
        //    this.resetDisplay(new Date(this.aar + 1, this.maaned, 1));
        break;
      }
      case 'ned_ett_aar': {
        //  this.resetDisplay(new Date(this.aar - 1, this.maaned, 1));
        break;
      }
      default: {
        //  this.resetDisplay(new Date(this.aar, item, 1));
        break;
      }
    }


  }
}
